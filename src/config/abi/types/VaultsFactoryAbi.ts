/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultsFactoryAbiInterface extends utils.Interface {
  functions: {
    "profiles(bytes32)": FunctionFragment;
    "quoteTokens(uint256)": FunctionFragment;
    "uniFactory()": FunctionFragment;
    "getPairAddress(address,address)": FunctionFragment;
    "getBnbBalances(address[])": FunctionFragment;
    "addVault(bytes32,address,address,uint256,address[],address[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "profiles", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "quoteTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPairAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBnbBalances",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [BytesLike, string, string, BigNumberish, string[], string[]]
  ): string;

  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBnbBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;

  events: {
    "AddVault(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddVault"): EventFragment;
}

export type AddVaultEvent = TypedEvent<
  [string, string, string],
  { profileId: string; vaultAddress: string; deployer: string }
>;

export type AddVaultEventFilter = TypedEventFilter<AddVaultEvent>;

export interface VaultsFactoryAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultsFactoryAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    profiles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniFactory(overrides?: CallOverrides): Promise<[string]>;

    getPairAddress(
      _baseToken: string,
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBnbBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addVault(
      _profileId: BytesLike,
      _receiver: string,
      _baseToken: string,
      _quoteTokenId: BigNumberish,
      _sellers: string[],
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  profiles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  uniFactory(overrides?: CallOverrides): Promise<string>;

  getPairAddress(
    _baseToken: string,
    _quoteToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getBnbBalances(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addVault(
    _profileId: BytesLike,
    _receiver: string,
    _baseToken: string,
    _quoteTokenId: BigNumberish,
    _sellers: string[],
    _buyers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    profiles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    uniFactory(overrides?: CallOverrides): Promise<string>;

    getPairAddress(
      _baseToken: string,
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBnbBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addVault(
      _profileId: BytesLike,
      _receiver: string,
      _baseToken: string,
      _quoteTokenId: BigNumberish,
      _sellers: string[],
      _buyers: string[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AddVault(bytes32,address,address)"(
      profileId?: null,
      vaultAddress?: null,
      deployer?: null
    ): AddVaultEventFilter;
    AddVault(
      profileId?: null,
      vaultAddress?: null,
      deployer?: null
    ): AddVaultEventFilter;
  };

  estimateGas: {
    profiles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getPairAddress(
      _baseToken: string,
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBnbBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addVault(
      _profileId: BytesLike,
      _receiver: string,
      _baseToken: string,
      _quoteTokenId: BigNumberish,
      _sellers: string[],
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    profiles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairAddress(
      _baseToken: string,
      _quoteToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBnbBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addVault(
      _profileId: BytesLike,
      _receiver: string,
      _baseToken: string,
      _quoteTokenId: BigNumberish,
      _sellers: string[],
      _buyers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
